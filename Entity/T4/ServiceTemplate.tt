<#@ assembly name="System.Core" #>
<#@ assembly name="System" #>
<#@ assembly name="$(TargetDir)$(TargetFileName)" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.CSharp" #>
<#@ include file="T4Toolbox.tt" #>
<#+
public class ServiceTemplate : Template
{
	public Type ModelType;
    public override string TransformText()
    {
#>
//--------------------------------------------------------------------------------------
// <auto-generated>
// QQ:584280962
// T4 生成时间<#=DateTime.Now.ToString() #>
// </auto-generated>
//--------------------------------------------------------------------------------------
using AutoMapper;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Dynamic;
using X.Constant;
using X.IService;
using X.IDao;
using X.Common;

namespace X.Service
{
    public partial class <#= ModelType.Name #>Service : AppServiceBase, I<#= ModelType.Name #>Service
    {
		public I<#= ModelType.Name #>Dao repository { get; set; } 
		
        public <#= ModelType.Name #>Service(I<#= ModelType.Name #>Dao _repository)
        {
            repository = _repository;
        }
        /// <summary>
        /// 增加一条数据
        /// </summary>
        public IResponse<Models.<#= ModelType.Name #>> Create(Models.<#= ModelType.Name #> model)
        {
            var entity = repository.Add(Mapper.Map<Entity.<#= ModelType.Name #>>(model), CurrentUserSession.UserId);
            if (entity == null)
            {
                return new IResponse<Models.<#= ModelType.Name #>> { Status = false, ErrCode = ErrorMessage.DataNotExist.Code, ErrMsg = ErrorMessage.DataNotExist.Msg };
            }
            return new IResponse<Models.<#= ModelType.Name #>> { Status = true, Result = Mapper.Map<Models.<#= ModelType.Name #>>(entity) };
        }
        public IListResult<Models.<#= ModelType.Name #>> GetList(string Filter = null, string Sort = null, params object[] Values)
        {
            var query = repository.Query();
            if (!Filter.IsNull())
            {
                query = query.Where(Filter, Values);
            }
            if (!Sort.IsNull())
            {
                query = query.SortBy(Sort);
            }
            var list = query.ToList().Select(entity => Mapper.Map<Models.<#= ModelType.Name #>>(entity)).ToList();
            var response = new IListResult<Models.<#= ModelType.Name #>> { Status = true, Result = list };
            return response;
        }

        public IPageResult<Models.<#= ModelType.Name #>> GetPageList(string Filter, string Sort, int PageNumber = 1, int PageSize = 20, params object[] Values)
        {
            var query = repository.Query();
            if (!Filter.IsNull())
            {
                query = query.Where(Filter, Values);
            }
            if (!Sort.IsNull())
            {
                query = query.SortBy(Sort);
            }
            long count = 0;
            var items = query.Page(PageNumber, PageSize, out count).ToList().Select(entity => Mapper.Map<Models.<#= ModelType.Name #>>(entity)).ToList();

            var response = new IPageResult<Models.<#= ModelType.Name #>>()
            {
                Result = new PagedResult<Models.<#= ModelType.Name #>>
                {
                    CurrentPage = PageNumber,
                    TotalItems = count,
                    PageSize = PageSize,
                    Items = items
                }
            };
            return response;
        }

        public IResponse<Models.<#= ModelType.Name #>> GetById(long ID)
        {
            var response = new IResponse<Models.<#= ModelType.Name #>>
            {
                Status = true,
                Result = Mapper.Map<Models.<#= ModelType.Name #>>(repository.GetById(ID))
            };
            return response;
        }
        public IResponse<Models.<#= ModelType.Name #>> Get(string Filter, params object[] values)
        {
            var query = repository.Query();
            if (!Filter.IsNull())
            {
                query = query.Where(Filter, values);
            }
            var response = new IResponse<Models.<#= ModelType.Name #>>
            {
                Status = true,
                Result = Mapper.Map<Models.<#= ModelType.Name #>>(query.First())
            };
            return response;
        }
		
        public IResponse<bool> Update(Models.<#= ModelType.Name #> model, params string[] values)
        {
            var response = new IResponse<bool>()
            {
                Status = true
            };
            var entity = Mapper.Map<Entity.<#= ModelType.Name #>>(model);
            response.Result = repository.Update(entity, CurrentUserSession.UserId, values);
            return response;
        }
        public IResponse<int> Update(Dictionary<string, string> list, string where, params object[] values)
        {
            var response = new IResponse<int>()
            {
                Status = true
            };
            response.Result = repository.Update(list, where, values);
            return response;
        }
        public IResponse<int> Update(string updateset, string where, params object[] values)
        {
            var response = new IResponse<int>()
            {
                Status = true
            };
            response.Result = repository.Update(updateset, where, values);
            return response;
        }
        public IResponse<int> SetProperty(string field, int val, params long[] ids)
        {
            var response = new IResponse<int>()
            {
                Status = true
            };
            response.Result = repository.Update(field + "=" + val, string.Format("Id in ({0})", string.Join(",", ids)));
            return response;
        }
        public IResponse<bool> Delete(long ID)
        {
            var response = new IResponse<bool>()
            {
                Status = true
            };
            response.Result = repository.DeleteByID(ID, CurrentUserSession.UserId);
            return response;
        }
        public IResponse<bool> DeleteIDs(List<long> IDs)
        {
            var response = new IResponse<bool>()
            {
                Status = true
            };
            response.Result = repository.DeleteByIDs(IDs, CurrentUserSession.UserId);
            return response;
        }
		
        public IResponse<bool> Exists(string Filter, params object[] Values)
        {
            var result = repository.Query().Where(Filter, Values).Count();
            return new IResponse<bool> { Status = true, Result = result > 0 };
        }
        public IResponse<int> Count(string Filter, params object[] Values)
        {
            var result = repository.Query().Where(Filter, Values).Count();
            return new IResponse<int> { Status = true, Result = result };
        }
    }
}
<#+
        return this.GenerationEnvironment.ToString();
    }
}
#>