<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetDir)$(TargetFileName)" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.CSharp" #>
<#@ include file="T4Toolbox.tt" #>
<#@ output extension=".txt" #>

<#
var types = typeof(X.Entity.BaseEntity).Assembly.GetTypes().Where(type =>type.Name!="BaseEntity"&&type.Name!="IsHiddenAttribute").ToArray();

    var t = new InitializerTemplate();
	t.Types = types;
    t.Output.File = "Initializer.cs";
	t.Output.Encoding = Encoding.UTF8;
	t.Output.Project = @"..\..\Service\Service.csproj";
    t.Render();
#>

<#+
public class InitializerTemplate : Template 
{
	public Type[] Types { get; set; }
    public override string TransformText()
    {
#>
//--------------------------------------------------------------------------------------
// <auto-generated>
// QQ:584280962
// T4 生成时间<#=DateTime.Now.ToString() #>
// </auto-generated>
//--------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;


namespace X.Service
{
    public class Initializer
    {
        public static void AutoMapperInit()
        {
<#+
	foreach(var type in this.Types)
	{
	if(typeof(X.Entity.BaseEntity).IsAssignableFrom(type) ) {
			PushIndent("\t\t\t");
			WriteLine(string.Format("AutoMapper.Mapper.CreateMap<Entity.{0}, Models.{0}>();", type.Name));
			WriteLine(string.Format("AutoMapper.Mapper.CreateMap<Models.{0}, Entity.{0}>();", type.Name));
			WriteLine("");
			PopIndent();
	}
	}
#>
        }
    }
}
<#+
        return GenerationEnvironment.ToString();
    }
}
#>