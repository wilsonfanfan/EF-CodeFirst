<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetDir)$(TargetFileName)" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.CSharp" #>
<#@ include file="T4Toolbox.tt" #>
<#@ output extension=".txt" #>

<#
var types = typeof(X.Entity.BaseEntity).Assembly.GetTypes().Where(type =>type.Name!="BaseEntity"&&type.Name!="IsHiddenAttribute").ToArray();

    var t = new DataContextTemplate();
	t.Types = types;
    t.Output.File = "DataContext.cs";
	t.Output.Encoding = Encoding.UTF8;
	t.Output.Project = @"..\..\Dao\Dao.csproj";
    t.Render();
#>

<#+
public class DataContextTemplate : Template 
{
	public Type[] Types { get; set; }
    public override string TransformText()
    {
#>
//--------------------------------------------------------------------------------------
// <auto-generated>
// QQ:584280962
// T4 生成时间<#=DateTime.Now.ToString() #>
// </auto-generated>
//--------------------------------------------------------------------------------------
using System;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data.Entity.Migrations;
using X.Entity;


namespace X.Dao
{

     /// <summary>
    /// 迁移   nuget: update-database
    /// </summary>
    internal sealed class ReportingDbMigrationsConfiguration : DbMigrationsConfiguration<DataContext>
    {
        public ReportingDbMigrationsConfiguration()
        {
            AutomaticMigrationsEnabled = true;//任何Model Class的修改将会直接更新DB
            AutomaticMigrationDataLossAllowed = true;
        }
    }

    public class DataContext:DbContext
    {
        /// <summary>
        /// 数据库访问类"name=DataConnection"
        /// </summary>
        public DataContext() : base("name=DefaultConnection") {
		    //根据实体字段自动创建表，如果Entity有改到就更新到表结构
            Database.SetInitializer<DataContext>(new MigrateDatabaseToLatestVersion<DataContext, ReportingDbMigrationsConfiguration>());
		}
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            modelBuilder.Types().Configure(entity => entity.ToTable("NN_" + entity.ClrType.Name));
            base.OnModelCreating(modelBuilder);
            //base.Database.Log = new Action<string>(q => System.Diagnostics.Debug.WriteLine(q));
            base.Database.Log = new Action<string>(q => logger.Write("Debug", q));
            //    modelBuilder.Entity<HistoryRow>().Property(h => h.MigrationId).HasMaxLength(100).IsRequired();
            //    modelBuilder.Entity<HistoryRow>().Property(h => h.ContextKey).HasMaxLength(200).IsRequired();
        }
<#+
	foreach(var type in this.Types)
	{
	if(typeof(X.Entity.BaseEntity).IsAssignableFrom(type) ) {
			PushIndent("\t\t");
			WriteLine(" /// <summary>");
			WriteLine(" /// "+ type.Name);
			WriteLine(" /// </summary>");
			WriteLine("public virtual DbSet<"+ type.Name+"> "+type.Name.ToLower()+"s { get; set; }");
			WriteLine("");
			PopIndent();
			}
	}
#>
    }
}
<#+
        return GenerationEnvironment.ToString();
    }
}
#>