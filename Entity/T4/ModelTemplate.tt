<#@ assembly name="System.Core" #>
<#@ assembly name="System" #>
<#@ assembly name="$(TargetDir)$(TargetFileName)" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.CSharp" #>
<#@ include file="T4Toolbox.tt" #>
<#+
public class ModelTemplate : Template
{
	public Type EntityType;
    public override string TransformText()
    {
#>
//--------------------------------------------------------------------------------------
// <auto-generated>
// QQ:584280962
// T4 生成时间<#=DateTime.Now.ToString() #>
// </auto-generated>
//--------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace X.Models
{
    [Serializable]
    public class <#= EntityType.Name #> : BaseModel
    {
		<#+
		var baseprops = typeof(X.Entity.BaseEntity).GetProperties().ToList();
		System.Collections.Generic.List<System.Reflection.PropertyInfo> properties = new System.Collections.Generic.List<System.Reflection.PropertyInfo>(EntityType.GetProperties().Where(
                prop => !Attribute.IsDefined(prop, typeof(X.Entity.IsIgnoreAttribute))
				&& !baseprops.Exists(p=>p.Name == prop.Name)));
		var provider = new CSharpCodeProvider();
		PushIndent("\t\t");
		foreach(var property in properties) {
			WriteLine("public "+provider.GetTypeOutput(new CodeTypeReference(property.PropertyType))+" " +property.Name+ " { get; set; }");
		}
		PopIndent();
		#>
    }
}
<#+
        return this.GenerationEnvironment.ToString();
    }
}
#>